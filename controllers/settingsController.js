const DraftSettings = require("../models/draftSettings");
const LiveSettings = require("../models/liveSettings");

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ (GET /api/draft) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
exports.getDraftSettings = async (req, res) => {
    try {
        let settings = await DraftSettings.findOne();
        if (!settings) {
            settings = await DraftSettings.create({}); // –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        }
        res.json(settings);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞", error });
    }
};

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ (PATCH /api/draft) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
exports.updateDraftSettings = async (req, res) => {
    try {
        let settings = await DraftSettings.findOne();
        if (settings) {
            Object.assign(settings, req.body); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫
            await settings.save();
        } else {
            settings = await DraftSettings.create(req.body); // –°–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        }
        res.json(settings);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞", error });
    }
};

// üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (POST /api/publish) - –∫–æ–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤ live
exports.publishSettings = async (req, res) => {
    try {
        const draft = await DraftSettings.findOne();
        if (!draft) return res.status(404).json({ message: "–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

        await LiveSettings.deleteMany(); // –û—á–∏—â–∞–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await LiveSettings.create(draft.toObject()); // –ö–æ–ø–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ live

        res.json({ message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!" });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", error });
    }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (GET /api/live) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è storefront
exports.getLiveSettings = async (req, res) => {
    try {
        let settings = await LiveSettings.findOne();
        if (!settings) {
            settings = await LiveSettings.create({}); // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π live, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        }
        res.json(settings);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", error });
    }
};
