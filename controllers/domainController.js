const User = require("../models/User");

// üîΩ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞
exports.assignDomain = async (req, res) => {
  const { domain } = req.body;
  const userId = req.user.id;

  if (!domain || !/^[a-zA-Z0-9\-]+$/.test(domain)) {
    return res.status(400).json({ message: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –¥–æ–º–µ–Ω–∞" });
  }

  try {
    const existing = await User.findOne({ customDomain: domain });
    if (existing) {
      return res.status(409).json({ message: "–î–æ–º–µ–Ω —É–∂–µ –∑–∞–Ω—è—Ç" });
    }

    await User.findByIdAndUpdate(userId, { customDomain: domain });
    res.json({ message: "–î–æ–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω", domain });
  } catch (err) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞", error: err });
  }
};

// üîº –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω —é–∑–µ—Ä–∞
exports.getDomain = async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    res.json({ domain: user.customDomain || null });
  } catch (err) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞", error: err });
  }
};

// üìå –ü–æ–ª—É—á–∏—Ç—å userId –ø–æ –¥–æ–º–µ–Ω—É (–¥–ª—è storefront)
exports.getUserIdByDomain = async (req, res) => {
  try {
    const { domain } = req.params;

    if (!domain) {
      return res.status(400).json({ message: "–î–æ–º–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω" });
    }

    const user = await User.findOne({ customDomain: domain });

    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –¥–æ–º–µ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({ userId: user._id });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ userId –ø–æ –¥–æ–º–µ–Ω—É:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", error: err });
  }
};
