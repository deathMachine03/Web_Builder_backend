const DraftProduct = require("../models/draftProduct");
const LiveProduct = require("../models/liveProduct");

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã (DRAFT)
exports.getDraftProducts = async (req, res) => {
    try {
        const products = await DraftProduct.find();
        res.json(products);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤", error });
    }
};

// üìå –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (DRAFT)
exports.addDraftProduct = async (req, res) => {
    try {
        const { name, price, description, imageUrl, quantity } = req.body;

        const newProduct = await DraftProduct.create({
            name,
            price,
            description,
            imageUrl,
            quantity: quantity ?? 1
        });

        res.status(201).json(newProduct);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", error });
    }
};


// üìå –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (DRAFT)
exports.updateDraftProduct = async (req, res) => {
    try {
        const { id } = req.params;
        console.log("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", id, req.body);
        const updatedProduct = await DraftProduct.findByIdAndUpdate(
            id,
            req.body,
            { new: true, runValidators: true }
        );

        if (!updatedProduct) {
            return res.status(404).json({ message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json(updatedProduct);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", error });
    }
};




// üìå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (DRAFT)
exports.deleteDraftProduct = async (req, res) => {
    try {
        const { id } = req.params;
        await DraftProduct.findByIdAndDelete(id);
        res.json({ message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω" });
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", error });
    }
};


// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (DRAFT)
exports.getDraftProductById = async (req, res) => {
    try {
        const { id } = req.params;
        const product = await DraftProduct.findById(id);
        if (!product) {
            return res.status(404).json({ message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }
        res.json(product);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", error });
    }
};


// üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–ø–µ—Ä–µ–Ω–æ—Å –∏–∑ DRAFT –≤ LIVE)
exports.publishProducts = async (req, res) => {
    try {
        const draftProducts = await DraftProduct.find();
        if (!draftProducts.length) return res.status(404).json({ message: "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏" });

        // –û—á–∏—Å—Ç–∫–∞ `live` –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ `draft`
        await LiveProduct.deleteMany();
        await LiveProduct.insertMany(draftProducts.map(p => p.toObject()));

        res.json({ message: "–¢–æ–≤–∞—Ä—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã" });
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", error });
    }
};

// üìå –ü–æ–ª—É—á–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (LIVE)
exports.getLiveProducts = async (req, res) => {
    try {
        const products = await LiveProduct.find();
        res.json(products);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", error });
    }
};
